// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LUT;
//
//    var lut = Lut.FromJson(jsonString);

namespace AdventureGame.LUTs
{
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LUT
    {
        [JsonProperty("pools", NullValueHandling = NullValueHandling.Ignore)]
        public List<Pool> Pools { get; set; }
    }

    public partial class Pool
    {
        [JsonProperty("rolls", NullValueHandling = NullValueHandling.Ignore)]
        public Rolls Rolls { get; set; }

        [JsonProperty("entries", NullValueHandling = NullValueHandling.Ignore)]
        public List<Entry> Entries { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        public int Weight { get; set; }

        [JsonProperty("functions", NullValueHandling = NullValueHandling.Ignore)]
        public List<Function> Functions { get; set; }
    }

    public partial class Function
    {
        [JsonProperty("function", NullValueHandling = NullValueHandling.Ignore)]
        public string FunctionFunction { get; set; }

        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public Rolls Count { get; set; }
    }

    public partial class Rolls
    {
        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public int Min { get; set; }

        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public int Max { get; set; }
    }

    public partial class Lut
    {
        public static Dictionary<string, LUT> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, LUT>>(json, AdventureGame.LUTs.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LUT self) => JsonConvert.SerializeObject(self, AdventureGame.LUTs.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new()
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
